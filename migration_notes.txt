#feed / inbox 
  -- NOTE: below assumes locked matches are deleted once sexual orientation is changed (unlocked matches from previous sexual orientations WILL still be in inbox)
  1. query for matches if hetero-male
    --feed:
      --- Match.un_seen(user.id) 
    --inbox:
      --- Shows user.matches, uses match.seen?(user.id), match.pitched?, and :locked attribute for UI/aesthetic variation
  2. query for pitches if hetero-female
    --feed:
      --- Match.un_seen(user.id).where('pitcher_id != ?', nil)
    --inbox:
      --- Shows all user.matches.where('pitcher_id != ?', nil), uses match.seen?(user.id) and :locked(seen but not responded to yet) for UI/aesthetic variation
  3. query for matches if homo-male
    --feed:
      --- Match.unseen_and_pitches(user_id)
    --inbox:
      --- Shows user.matches, uses match.seen?(user.id), match.pitched?, and :pitcher_id, :pitch_seen and :locked attributes for UI/aesthetic variation
 4. query for matches if homo-female
  --feed:
    --- Match.unseen_and_pitches(user_id)
  --inbox:
     --- Shows user.matches, uses match.seen?(user.id), match.pitched?, and :pitcher_id, :pitch_seen and :locked attributes for UI/aesthetic variation

#match creation
  1. hetero match 
    -- look at gender of both users and sexual orientation to determine this
    1. initial attribute values: (:user_1_id and :user_2_id set arbitrarily)
      -- user_1_seen: false
      -- locked: true
      -- pitch_seen: false
      -- user_2_seen: false
    2. sees match
      -- @match.seen!(guy.id)
    3. the guy can pitch, convo is locked, can't say anything else
      -- @match.update(pitcher_id: guy.id)
    4. girl learns about pitch
      -- @match.seen!(girl.id)
      -- @match.update(pitch_seen: true)
    5a. girl responds, unlocks convo
      -- @match.update(locked: false)
    5b. girl deletes? 
      -- match is deleted?


  2. homo match
    -- look at gender of both users and sexual orientation to determine this
    1. initial attribute values: (:user_1_id and :user_2_id set arbitrarily)
      -- user_1_seen: false
      -- locked: true (locked until one person pitches, and other person responds)
      -- pitch_seen: false
      -- user_2_seen: false
    2. sees match
      -- @match.seen!(user_1.id)
      -- @match.seen!(user_2.id)
    3. either can pitch, convo is locked, can't say anything else
      -- @match.update(pitcher_id: user_1.id)
    4. someone sees pitch
      -- @match.update(pitch_seen: true)
      -- might also mark match as seen now
    4. pitchee responds to pitch
      -- @match.update(locked: false)


=====================================================================================




# Potential logic for setting match UI for various match states
  #guy logic -- SAME AS GALS
  if @convo.locked? && !@convo.pitched?
    #guy can only send one message
  elsif @convo.locked? && @convo.pitched?
    #guy can do nothing
  elsif !@convo.locked?
    #messages can be exchanged freely
  end

  #gal logic -- SAME AS GIRLS
  if @convo.locked? && !@convo.pitched?
   #gal knows nothing
  elsif @convo.locked? && @convo.pitched?
    #girl is notified of new pitch
  elsif !@convo.locked?
    #messages can be exchanged freely
  end




